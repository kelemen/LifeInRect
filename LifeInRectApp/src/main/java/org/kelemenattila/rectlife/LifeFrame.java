package org.kelemenattila.rectlife;

import java.awt.GridLayout;
import java.util.concurrent.TimeUnit;
import javax.swing.JPanel;
import javax.swing.border.TitledBorder;
import org.jtrim.cancel.Cancellation;
import org.jtrim.cancel.CancellationController;
import org.jtrim.cancel.CancellationSource;
import org.jtrim.cancel.CancellationToken;
import org.jtrim.concurrent.CancelableTask;
import org.jtrim.concurrent.TaskExecutorService;
import org.jtrim.concurrent.ThreadPoolTaskExecutor;
import org.jtrim.concurrent.UpdateTaskExecutor;
import org.jtrim.swing.concurrent.SwingUpdateTaskExecutor;

/**
 *
 * @author Kelemen Attila
 */
@SuppressWarnings("serial")
public class LifeFrame extends javax.swing.JFrame {
    private static final TaskExecutorService BCKG_EXECUTOR = createExecutor("LifeExecutor", 1);
    private static final int WORLD_SIZE = 100;
    private static final int SHOW_IMAGE_STEP_SIZE = 10;

    private CancellationController taskCanceler;
    private ImageDisplay[] viewDisplays;

    /**
     * Creates new form LifeFrame
     */
    public LifeFrame() {
        this.taskCanceler = null;
        this.viewDisplays = null;

        initComponents();
    }

    private static TaskExecutorService createExecutor(String name, int threadCount) {
        ThreadPoolTaskExecutor result = new ThreadPoolTaskExecutor(
                name, threadCount, Integer.MAX_VALUE, 1000, TimeUnit.MILLISECONDS);
        result.dontNeedShutdown();
        return result;
    }

    private void showWorld(EntityWorld.WorldView[] view) {
        if (viewDisplays == null || viewDisplays.length != view.length) {
            viewDisplays = new ImageDisplay[view.length];

            jFeedbackPanel.removeAll();
            jFeedbackPanel.setLayout(new GridLayout(view.length, 1, 0, 5));

            for (int i = 0; i < view.length; i++) {
                viewDisplays[i] = new ImageDisplay();
                JPanel panel = new JPanel(new GridLayout(1, 1, 0, 0));
                panel.setBorder(new TitledBorder(view[i].getCaption()));
                panel.add(viewDisplays[i]);
                jFeedbackPanel.add(panel);
            }

            jFeedbackPanel.revalidate();
            jFeedbackPanel.repaint();
        }

        for (int i = 0; i < view.length; i++) {
            viewDisplays[i].setImage(view[i].getImage());
        }
    }

    private void showWorldView(EntityWorld world, UpdateTaskExecutor executor) {
        final EntityWorld.WorldView[] view = world.viewWorld();
        executor.execute(new Runnable() {
            @Override
            public void run() {
                showWorld(view);
            }
        });
    }

    private void runWorld(CancellationToken cancelToken) {
        UpdateTaskExecutor progressReporter = new SwingUpdateTaskExecutor();
        UpdateTaskExecutor imageReporter = new SwingUpdateTaskExecutor();

        EntityWorld world = new EntityWorld(WORLD_SIZE, WORLD_SIZE);

        showWorldView(world, imageReporter);

        long stepIndex = 0;
        int sinceLastShow = 0;
        while (!cancelToken.isCanceled()) {
            world.stepWorld();
            stepIndex++;

            if (sinceLastShow >= SHOW_IMAGE_STEP_SIZE) {
                sinceLastShow = 0;
                showWorldView(world, imageReporter);
            }
            else {
                sinceLastShow++;
            }

            final long currentStepIndex = stepIndex;
            progressReporter.execute(new Runnable() {
                @Override
                public void run() {
                    jStepCaption.setText("Step: " + currentStepIndex);
                }
            });
        }
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jStartStopButton = new javax.swing.JButton();
        jStepCaption = new javax.swing.JLabel();
        jFeedbackPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Life in Rect");

        jStartStopButton.setText("Start");
        jStartStopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jStartStopButtonActionPerformed(evt);
            }
        });

        jStepCaption.setText("Step: 0");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(116, Short.MAX_VALUE)
                .addComponent(jStartStopButton)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jStepCaption)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jStepCaption)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 355, Short.MAX_VALUE)
                .addComponent(jStartStopButton)
                .addContainerGap())
        );

        javax.swing.GroupLayout jFeedbackPanelLayout = new javax.swing.GroupLayout(jFeedbackPanel);
        jFeedbackPanel.setLayout(jFeedbackPanelLayout);
        jFeedbackPanelLayout.setHorizontalGroup(
            jFeedbackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 363, Short.MAX_VALUE)
        );
        jFeedbackPanelLayout.setVerticalGroup(
            jFeedbackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jFeedbackPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jFeedbackPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jStartStopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jStartStopButtonActionPerformed
        if (taskCanceler != null) {
            taskCanceler.cancel();
            taskCanceler = null;
            jStartStopButton.setText("Start");
        }
        else {
            CancellationSource cancelSource = Cancellation.createCancellationSource();
            taskCanceler = cancelSource.getController();
            jStartStopButton.setText("Stop");

            BCKG_EXECUTOR.execute(cancelSource.getToken(), new CancelableTask() {
                @Override
                public void execute(CancellationToken cancelToken) {
                    runWorld(cancelToken);
                }
            }, null);
        }
    }//GEN-LAST:event_jStartStopButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jFeedbackPanel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton jStartStopButton;
    private javax.swing.JLabel jStepCaption;
    // End of variables declaration//GEN-END:variables
}
